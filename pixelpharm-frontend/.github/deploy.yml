name: Deploy PixelPharm to AWS

on:
  push:
    branches: [feature/aws_int, main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "18"
  AWS_REGION: us-east-1
  PROJECT_NAME: pixelpharm

jobs:
  # ============================================================================
  # Quality Checks
  # ============================================================================
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "pixelpharm-frontend/package-lock.json"

      - name: Install dependencies
        working-directory: ./pixelpharm-frontend
        run: npm ci

      - name: Run linting
        working-directory: ./pixelpharm-frontend
        run: npm run lint

      - name: Run type checking
        working-directory: ./pixelpharm-frontend
        run: npx tsc --noEmit

      - name: Run tests (if available)
        working-directory: ./pixelpharm-frontend
        run: npm test --if-present

  # ============================================================================
  # Build Application
  # ============================================================================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "pixelpharm-frontend/package-lock.json"

      - name: Install dependencies
        working-directory: ./pixelpharm-frontend
        run: npm ci

      - name: Build application
        working-directory: ./pixelpharm-frontend
        run: npm run build
        env:
          NEXT_PUBLIC_AWS_REGION: ${{ env.AWS_REGION }}
          NEXT_PUBLIC_ENABLE_BETA_FEATURES: "true"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: pixelpharm-frontend/.next
          retention-days: 1

  # ============================================================================
  # Deploy Infrastructure (Production only)
  # ============================================================================
  deploy-infrastructure:
    name: Deploy AWS Infrastructure
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/aws_int'
    outputs:
      user-pool-id: ${{ steps.get-outputs.outputs.user-pool-id }}
      user-pool-client-id: ${{ steps.get-outputs.outputs.user-pool-client-id }}
      s3-bucket-name: ${{ steps.get-outputs.outputs.s3-bucket-name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy CloudFormation stack
        working-directory: ./pixelpharm-frontend
        run: |
          aws cloudformation deploy \
            --template-file infrastructure.yaml \
            --stack-name ${{ env.PROJECT_NAME }}-infrastructure-prod \
            --parameter-overrides \
              Environment=prod \
              ProjectName=${{ env.PROJECT_NAME }} \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }}

      - name: Get CloudFormation outputs
        id: get-outputs
        run: |
          USER_POOL_ID=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.PROJECT_NAME }}-infrastructure-prod \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' \
            --output text)

          USER_POOL_CLIENT_ID=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.PROJECT_NAME }}-infrastructure-prod \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`UserPoolClientId`].OutputValue' \
            --output text)

          S3_BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.PROJECT_NAME }}-infrastructure-prod \
            --region ${{ env.AWS_REGION }} \
            --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \
            --output text)

          echo "user-pool-id=$USER_POOL_ID" >> $GITHUB_OUTPUT
          echo "user-pool-client-id=$USER_POOL_CLIENT_ID" >> $GITHUB_OUTPUT
          echo "s3-bucket-name=$S3_BUCKET_NAME" >> $GITHUB_OUTPUT

  # ============================================================================
  # Deploy to Vercel
  # ============================================================================
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [build, deploy-infrastructure]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/aws_int'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: pixelpharm-frontend/.next

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: "pixelpharm-frontend/package-lock.json"

      - name: Install dependencies
        working-directory: ./pixelpharm-frontend
        run: npm ci

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        working-directory: ./pixelpharm-frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          # Set environment variables in Vercel
          vercel env add NEXT_PUBLIC_AWS_REGION production <<< "${{ env.AWS_REGION }}" || true
          vercel env add NEXT_PUBLIC_AWS_USER_POOL_ID production <<< "${{ needs.deploy-infrastructure.outputs.user-pool-id }}" || true
          vercel env add NEXT_PUBLIC_AWS_USER_POOL_WEB_CLIENT_ID production <<< "${{ needs.deploy-infrastructure.outputs.user-pool-client-id }}" || true
          vercel env add AWS_S3_BUCKET_NAME production <<< "${{ needs.deploy-infrastructure.outputs.s3-bucket-name }}" || true
          vercel env add AWS_ACCESS_KEY_ID production <<< "${{ secrets.AWS_ACCESS_KEY_ID }}" || true
          vercel env add AWS_SECRET_ACCESS_KEY production <<< "${{ secrets.AWS_SECRET_ACCESS_KEY }}" || true
          vercel env add AWS_BEDROCK_REGION production <<< "${{ env.AWS_REGION }}" || true
          vercel env add BEDROCK_MODEL_ID production <<< "anthropic.claude-3-haiku-20240307-v1:0" || true
          vercel env add NEXT_PUBLIC_ENABLE_BETA_FEATURES production <<< "true" || true
          vercel env add NEXT_PUBLIC_ENABLE_SIGNUP production <<< "true" || true

          # Deploy to production
          vercel --prod --confirm --token ${{ secrets.VERCEL_TOKEN }}

  # ============================================================================
  # Post-deployment Tests
  # ============================================================================
  post-deployment-tests:
    name: Post-deployment Tests
    runs-on: ubuntu-latest
    needs: deploy-vercel
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/aws_int'
    steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Test health endpoint
        run: |
          # Get deployment URL from Vercel (you might need to store this as output from deploy step)
          # For now, we'll use a generic check
          echo "Deployment health check would go here"
          # curl -f https://your-deployment-url/api/health || exit 1

      - name: Test AWS services connectivity
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          aws sts get-caller-identity
          echo "AWS connectivity verified"

  # ============================================================================
  # Notification
  # ============================================================================
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-vercel, post-deployment-tests]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/aws_int')
    steps:
      - name: Notify success
        if: needs.deploy-vercel.result == 'success' && needs.post-deployment-tests.result == 'success'
        run: |
          echo "🎉 PixelPharm deployment successful!"
          echo "✅ Infrastructure deployed"
          echo "✅ Application deployed to Vercel"
          echo "✅ Post-deployment tests passed"

      - name: Notify failure
        if: needs.deploy-vercel.result == 'failure' || needs.post-deployment-tests.result == 'failure'
        run: |
          echo "❌ PixelPharm deployment failed!"
          echo "Check the logs for details"
          exit 1
