import { NextResponse } from 'next/server';
import { Resend } from 'resend';

let resend: Resend | null = null;
if (process.env.RESEND_API_KEY) {
  resend = new Resend(process.env.RESEND_API_KEY);
}

export async function POST(request: Request) {
  try {
    const { email } = await request.json();

    if (!email || typeof email !== 'string') {
      return NextResponse.json(
        { error: 'Email address is required' },
        { status: 400 }
      );
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return NextResponse.json(
        { error: 'Please enter a valid email address' },
        { status: 400 }
      );
    }

    console.log(`üìß Newsletter subscription request for: ${email}`);

    // Send notification email to newsletter@pixelpharm.com
    if (resend) {
      try {
        await resend.emails.send({
          from: 'PixelPharm Health <noreply@pixelpharm.com>',
          to: ['newsletter@pixelpharm.com'],
          subject: 'New Newsletter Subscription',
          html: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
              <h2 style="color: #1e40af; margin-bottom: 20px;">New Newsletter Subscription</h2>
              <p style="margin-bottom: 15px;">A new user has subscribed to the PixelPharm Health newsletter:</p>
              <div style="background-color: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;">
                <p style="margin: 0; font-size: 16px;"><strong>Email:</strong> ${email}</p>
                <p style="margin: 10px 0 0 0; color: #64748b; font-size: 14px;">
                  <strong>Timestamp:</strong> ${new Date().toLocaleString()}
                </p>
              </div>
              <p style="color: #64748b; font-size: 14px; margin-top: 30px;">
                This email was automatically generated by the PixelPharm Health website.
              </p>
            </div>
          `,
        });

        console.log(`‚úÖ Newsletter subscription notification sent for: ${email}`);
      } catch (emailError: any) {
        console.error('‚ùå Failed to send newsletter notification email:', emailError);
        // Don't fail the request if email sending fails, just log it
      }
    } else {
      console.log('‚ö†Ô∏è Resend not configured, newsletter subscription logged only');
    }

    return NextResponse.json({
      success: true,
      message: 'Successfully subscribed to newsletter! Thank you for your interest.',
    });

  } catch (error: any) {
    console.error('‚ùå Error processing newsletter subscription:', error);
    return NextResponse.json(
      { error: 'Failed to process newsletter subscription. Please try again.' },
      { status: 500 }
    );
  }
}