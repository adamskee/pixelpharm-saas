generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                  String  @id
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  users               users   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model ai_processing_results {
  processing_id     String           @id
  upload_id         String
  user_id           String
  processing_type   ProcessingType
  raw_results       Json
  confidence_score  Decimal?         @db.Decimal(5, 4)
  processing_status ProcessingStatus @default(PENDING)
  error_message     String?
  created_at        DateTime         @default(now())
  processed_at      DateTime?
  file_uploads      file_uploads     @relation(fields: [upload_id], references: [upload_id], onDelete: Cascade)
  users             users            @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model biomarker_references {
  reference_id   String   @id
  biomarker_name String
  gender         Gender   @default(ALL)
  age_min        Int?
  age_max        Int?
  normal_min     Decimal? @db.Decimal(10, 3)
  normal_max     Decimal? @db.Decimal(10, 3)
  optimal_min    Decimal? @db.Decimal(10, 3)
  optimal_max    Decimal? @db.Decimal(10, 3)
  unit           String
  source         String?
  updated_at     DateTime

  @@unique([biomarker_name, gender, age_min, age_max])
}

model biomarker_values {
  value_id           String             @id
  user_id            String
  result_id          String
  biomarker_name     String
  value              Decimal            @db.Decimal(10, 3)
  unit               String
  reference_range    String?
  is_abnormal        Boolean            @default(false)
  test_date          DateTime           @db.Date
  created_at         DateTime           @default(now())
  blood_test_results blood_test_results @relation(fields: [result_id], references: [result_id], onDelete: Cascade)
  users              users              @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@index([user_id, biomarker_name, test_date])
}

model blood_test_results {
  result_id        String             @id
  user_id          String
  upload_id        String
  test_date        DateTime           @db.Date
  lab_name         String?
  biomarkers       Json
  created_at       DateTime           @default(now())
  updated_at       DateTime
  biomarker_values biomarker_values[]
  file_uploads     file_uploads       @relation(fields: [upload_id], references: [upload_id], onDelete: Cascade)
  users            users              @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model body_composition_results {
  composition_id       String       @id
  user_id              String
  upload_id            String
  test_date            DateTime     @db.Date
  total_weight         Decimal?     @db.Decimal(5, 2)
  body_fat_percentage  Decimal?     @db.Decimal(5, 2)
  skeletal_muscle_mass Decimal?     @db.Decimal(5, 2)
  visceral_fat_level   Int?
  bmr                  Int?
  raw_data             Json?
  created_at           DateTime     @default(now())
  updated_at           DateTime
  file_uploads         file_uploads @relation(fields: [upload_id], references: [upload_id], onDelete: Cascade)
  users                users        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model file_uploads {
  upload_id                String                     @id
  user_id                  String
  file_key                 String
  original_filename        String
  file_type                String
  upload_type              UploadType
  file_size                BigInt
  upload_status            UploadStatus               @default(UPLOADED)
  created_at               DateTime                   @default(now())
  updated_at               DateTime
  ai_processing_results    ai_processing_results[]
  blood_test_results       blood_test_results[]
  body_composition_results body_composition_results[]
  users                    users                      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  fitness_activities       fitness_activities[]
}

model fitness_activities {
  activity_id      String       @id
  user_id          String
  upload_id        String
  activity_date    DateTime     @db.Date
  activity_type    String
  duration_minutes Int?
  calories_burned  Int?
  avg_heart_rate   Int?
  max_heart_rate   Int?
  distance_km      Decimal?     @db.Decimal(8, 3)
  raw_data         Json?
  created_at       DateTime     @default(now())
  updated_at       DateTime
  file_uploads     file_uploads @relation(fields: [upload_id], references: [upload_id], onDelete: Cascade)
  users            users        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model health_insights {
  insight_id    String      @id
  user_id       String
  insight_type  InsightType
  title         String
  description   String
  priority      Priority
  data_sources  Json?
  ai_confidence Decimal?    @db.Decimal(5, 4)
  is_read       Boolean     @default(false)
  expires_at    DateTime?
  created_at    DateTime    @default(now())
  updated_at    DateTime
  users         users       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model medical_reviews {
  id                   String   @id
  user_id              String
  overall_health_score Int
  health_grade         String
  risk_level           String
  primary_risks        String[]
  critical_findings    Int
  abnormal_findings    Int
  data_completeness    Float
  next_review_date     DateTime
  analysis_version     String
  created_at           DateTime @default(now())
  updated_at           DateTime
  users                users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model sessions {
  id            String   @id
  session_token String   @unique
  user_id       String
  expires       DateTime
  users         users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model users {
  user_id                  String                     @id
  cognito_sub              String?                    @unique
  email                    String                     @unique
  first_name               String?
  last_name                String?
  date_of_birth            DateTime?                  @db.Date
  gender                   Gender?
  timezone                 String?                    @default("UTC")
  name                     String?
  image                    String?
  email_verified           DateTime?
  password_hash            String?
  provider                 String?                    @default("google")
  created_at               DateTime                   @default(now())
  updated_at               DateTime
  bio                      String?
  height                   Decimal?                   @db.Decimal(5, 2)
  weight                   Decimal?                   @db.Decimal(5, 2)
  stripe_customer_id       String?                    @unique
  stripe_subscription_id   String?                    @unique
  subscription_expires_at  DateTime?
  subscription_plan        String?
  subscription_status      String?
  is_anonymous             Boolean                    @default(false)
  plan_type                PlanType                   @default(FREE)
  uploads_used             Int                        @default(0)
  upgrade_prompt_shown     Boolean                    @default(false)
  accounts                 accounts[]
  ai_processing_results    ai_processing_results[]
  biomarker_values         biomarker_values[]
  blood_test_results       blood_test_results[]
  body_composition_results body_composition_results[]
  file_uploads             file_uploads[]
  fitness_activities       fitness_activities[]
  health_insights          health_insights[]
  medical_reviews          medical_reviews[]
  sessions                 sessions[]
}

model verificationtokens {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Gender {
  MALE
  FEMALE
  ALL
}

enum InsightType {
  TREND_ANALYSIS
  RISK_ASSESSMENT
  RECOMMENDATION
  ALERT
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProcessingStatus {
  PENDING
  COMPLETED
  FAILED
}

enum ProcessingType {
  OCR
  HEALTH_ANALYSIS
  RECOMMENDATIONS
}

enum UploadStatus {
  UPLOADED
  PROCESSING
  PROCESSED
  FAILED
}

enum UploadType {
  BLOOD_TESTS
  BODY_COMPOSITION
  FITNESS_ACTIVITIES
}

enum PlanType {
  FREE
  BASIC
  PRO
}
