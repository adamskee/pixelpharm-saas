#!/bin/bash

# ========================================
# PixelPharm AWS Deployment Script
# ========================================

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="pixelpharm"
ENVIRONMENT="prod"
REGION="us-east-1"
STACK_NAME="${PROJECT_NAME}-infrastructure-${ENVIRONMENT}"

echo -e "${BLUE}🚀 Starting PixelPharm AWS Deployment${NC}"
echo "=================================================="

# Check if AWS CLI is configured
check_aws_cli() {
    echo -e "${YELLOW}📋 Checking AWS CLI configuration...${NC}"
    
    if ! command -v aws &> /dev/null; then
        echo -e "${RED}❌ AWS CLI is not installed. Please install it first.${NC}"
        exit 1
    fi
    
    if ! aws sts get-caller-identity &> /dev/null; then
        echo -e "${RED}❌ AWS credentials not configured. Run 'aws configure' first.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}✅ AWS CLI configured successfully${NC}"
}

# Validate environment files
check_environment() {
    echo -e "${YELLOW}📋 Checking environment configuration...${NC}"
    
    if [ ! -f ".env.production" ]; then
        echo -e "${RED}❌ .env.production file not found. Please create it first.${NC}"
        exit 1
    fi
    
    # Check for required environment variables
    required_vars=(
        "AWS_ACCESS_KEY_ID"
        "AWS_SECRET_ACCESS_KEY"
        "NEXT_PUBLIC_AWS_REGION"
    )
    
    source .env.production
    
    for var in "${required_vars[@]}"; do
        if [ -z "${!var}" ]; then
            echo -e "${RED}❌ Required environment variable $var is not set${NC}"
            exit 1
        fi
    done
    
    echo -e "${GREEN}✅ Environment configuration valid${NC}"
}

# Deploy AWS Infrastructure
deploy_infrastructure() {
    echo -e "${YELLOW}🏗️  Deploying AWS infrastructure...${NC}"
    
    aws cloudformation deploy \
        --template-file infrastructure.yaml \
        --stack-name $STACK_NAME \
        --parameter-overrides \
            Environment=$ENVIRONMENT \
            ProjectName=$PROJECT_NAME \
        --capabilities CAPABILITY_NAMED_IAM \
        --region $REGION
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✅ Infrastructure deployed successfully${NC}"
    else
        echo -e "${RED}❌ Infrastructure deployment failed${NC}"
        exit 1
    fi
}

# Get CloudFormation outputs
get_infrastructure_outputs() {
    echo -e "${YELLOW}📤 Getting infrastructure outputs...${NC}"
    
    USER_POOL_ID=$(aws cloudformation describe-stacks \
        --stack-name $STACK_NAME \
        --region $REGION \
        --query 'Stacks[0].Outputs[?OutputKey==`UserPoolId`].OutputValue' \
        --output text)
    
    USER_POOL_CLIENT_ID=$(aws cloudformation describe-stacks \
        --stack-name $STACK_NAME \
        --region $REGION \
        --query 'Stacks[0].Outputs[?OutputKey==`UserPoolClientId`].OutputValue' \
        --output text)
    
    S3_BUCKET_NAME=$(aws cloudformation describe-stacks \
        --stack-name $STACK_NAME \
        --region $REGION \
        --query 'Stacks[0].Outputs[?OutputKey==`S3BucketName`].OutputValue' \
        --output text)
    
    echo -e "${GREEN}✅ Infrastructure outputs retrieved${NC}"
    echo "User Pool ID: $USER_POOL_ID"
    echo "User Pool Client ID: $USER_POOL_CLIENT_ID"
    echo "S3 Bucket: $S3_BUCKET_NAME"
}

# Update environment with actual values
update_environment() {
    echo -e "${YELLOW}🔧 Updating environment with infrastructure outputs...${NC}"
    
    # Create or update .env.local with actual values
    cat > .env.local << EOF
# Generated by deployment script - $(date)
NEXT_PUBLIC_AWS_REGION=$REGION
NEXT_PUBLIC_AWS_USER_POOL_ID=$USER_POOL_ID
NEXT_PUBLIC_AWS_USER_POOL_WEB_CLIENT_ID=$USER_POOL_CLIENT_ID
AWS_S3_BUCKET_NAME=$S3_BUCKET_NAME
EOF
    
    echo -e "${GREEN}✅ Environment updated with actual AWS resource IDs${NC}"
}

# Build the application
build_application() {
    echo -e "${YELLOW}🔨 Building application...${NC}"
    
    npm install
    npm run build
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✅ Application built successfully${NC}"
    else
        echo -e "${RED}❌ Build failed${NC}"
        exit 1
    fi
}

# Deploy to Vercel
deploy_to_vercel() {
    echo -e "${YELLOW}🚢 Deploying to Vercel...${NC}"
    
    if ! command -v vercel &> /dev/null; then
        echo -e "${YELLOW}Installing Vercel CLI...${NC}"
        npm install -g vercel
    fi
    
    # Set environment variables in Vercel
    vercel env add NEXT_PUBLIC_AWS_REGION production <<< $REGION
    vercel env add NEXT_PUBLIC_AWS_USER_POOL_ID production <<< $USER_POOL_ID
    vercel env add NEXT_PUBLIC_AWS_USER_POOL_WEB_CLIENT_ID production <<< $USER_POOL_CLIENT_ID
    vercel env add AWS_S3_BUCKET_NAME production <<< $S3_BUCKET_NAME
    
    # Deploy to production
    vercel --prod
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✅ Deployed to Vercel successfully${NC}"
    else
        echo -e "${RED}❌ Vercel deployment failed${NC}"
        exit 1
    fi
}

# Test deployment
test_deployment() {
    echo -e "${YELLOW}🧪 Testing deployment...${NC}"
    
    # Test health endpoint
    DEPLOYMENT_URL=$(vercel --prod --confirm | grep -o 'https://[^[:space:]]*')
    
    if [ -n "$DEPLOYMENT_URL" ]; then
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL/api/health")
        
        if [ "$HTTP_STATUS" -eq 200 ]; then
            echo -e "${GREEN}✅ Health check passed${NC}"
        else
            echo -e "${YELLOW}⚠️  Health check returned status $HTTP_STATUS${NC}"
        fi
    fi
}

# Main deployment function
main() {
    echo -e "${BLUE}Starting deployment process...${NC}"
    
    check_aws_cli
    check_environment
    deploy_infrastructure
    get_infrastructure_outputs
    update_environment
    build_application
    deploy_to_vercel
    test_deployment
    
    echo ""
    echo "=================================================="
    echo -e "${GREEN}🎉 Deployment completed successfully!${NC}"
    echo ""
    echo -e "${BLUE}📋 Deployment Summary:${NC}"
    echo "• AWS Stack: $STACK_NAME"
    echo "• User Pool ID: $USER_POOL_ID"
    echo "• S3 Bucket: $S3_BUCKET_NAME"
    echo "• Environment: $ENVIRONMENT"
    echo ""
    echo -e "${YELLOW}🔗 Next Steps:${NC}"
    echo "1. Visit your Vercel dashboard to get the deployment URL"
    echo "2. Test user registration and file upload"
    echo "3. Monitor CloudWatch logs for any issues"
    echo "4. Update DNS if using custom domain"
    echo ""
}

# Run main function
main "$@"